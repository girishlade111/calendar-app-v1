import { useState } from 'react';
import { Button } from "/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "/components/ui/card";
import { Calendar, Clock, Plus } from 'lucide-react';
import { 
  format, 
  addMonths, 
  subMonths, 
  startOfMonth, 
  endOfMonth, 
  eachDayOfInterval, 
  isSameMonth, 
  isSameDay, 
  parseISO, 
  addWeeks, 
  subWeeks, 
  startOfWeek, 
  endOfWeek, 
  addDays, 
  subDays, 
  formatISO 
} from 'date-fns';

type Event = {
  id: string;
  title: string;
  date: string;
  startTime: string;
  endTime: string;
  color: string;
  description?: string;
};

type Task = {
  id: string;
  title: string;
  date: string;
  completed: boolean;
  priority: 'low' | 'medium' | 'high';
};

export default function CalendarApp() {
  const [currentDate, setCurrentDate] = useState<Date>(new Date());
  const [view, setView] = useState<'month' | 'week' | 'day'>('month');
  const [events, setEvents] = useState<Event[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [showEventForm, setShowEventForm] = useState(false);
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  
  const [eventForm, setEventForm] = useState<Omit<Event, 'id'>>({
    title: '',
    date: formatISO(new Date(), { representation: 'date' }),
    startTime: '09:00',
    endTime: '10:00',
    color: 'blue',
    description: ''
  });

  const [taskForm, setTaskForm] = useState<Omit<Task, 'id'>>({
    title: '',
    date: formatISO(new Date(), { representation: 'date' }),
    completed: false,
    priority: 'medium'
  });

  const nextPeriod = () => {
    if (view === 'month') setCurrentDate(addMonths(currentDate, 1));
    if (view === 'week') setCurrentDate(addWeeks(currentDate, 1));
    if (view === 'day') setCurrentDate(addDays(currentDate, 1));
  };

  const prevPeriod = () => {
    if (view === 'month') setCurrentDate(subMonths(currentDate, 1));
    if (view === 'week') setCurrentDate(subWeeks(currentDate, 1));
    if (view === 'day') setCurrentDate(subDays(currentDate, 1));
  };

  const goToToday = () => {
    setCurrentDate(new Date());
  };

  const handleEventSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newEvent = {
      ...eventForm,
      id: Date.now().toString()
    };
    setEvents([...events, newEvent]);
    setShowEventForm(false);
    setEventForm({
      title: '',
      date: formatISO(new Date(), { representation: 'date' }),
      startTime: '09:00',
      endTime: '10:00',
      color: 'blue',
      description: ''
    });
  };

  const handleTaskSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newTask = {
      ...taskForm,
      id: Date.now().toString()
    };
    setTasks([...tasks, newTask]);
    setShowTaskForm(false);
    setTaskForm({
      title: '',
      date: formatISO(new Date(), { representation: 'date' }),
      completed: false,
      priority: 'medium'
    });
  };

  const toggleTaskCompletion = (id: string) => {
    setTasks(tasks.map(task => 
      task.id === id ? { ...task, completed: !task.completed } : task
    ));
  };

  const deleteEvent = (id: string) => {
    setEvents(events.filter(event => event.id !== id));
    setSelectedEvent(null);
  };

  const getEventColor = (color: string) => {
    switch(color) {
      case 'blue': return 'bg-blue-100 text-blue-800';
      case 'red': return 'bg-red-100 text-red-800';
      case 'green': return 'bg-green-100 text-green-800';
      case 'purple': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const renderMonthView = () => {
    const monthStart = startOfMonth(currentDate);
    const monthEnd = endOfMonth(currentDate);
    const monthDays = eachDayOfInterval({ start: monthStart, end: monthEnd });

    return (
      <div className="grid grid-cols-7 gap-1">
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
          <div key={day} className="text-center font-bold p-2 border-b">
            {day}
          </div>
        ))}
        {monthDays.map(day => {
          const dayEvents = events.filter(event => 
            isSameDay(parseISO(event.date), day)
          );
          const dayTasks = tasks.filter(task => 
            isSameDay(parseISO(task.date), day)
          );
          
          return (
            <div 
              key={day.toString()}
              className={`min-h-24 p-1 border ${!isSameMonth(day, currentDate) ? 'bg-gray-100' : ''} ${
                isSameDay(day, new Date()) ? 'bg-blue-50' : ''
              }`}
            >
              <div className="text-right mb-1">
                <span className={`${isSameDay(day, new Date()) ? 'text-blue-600 font-bold' : ''}`}>
                  {format(day, 'd')}
                </span>
              </div>
              <div className="space-y-1">
                {dayEvents.slice(0, 3).map(event => (
                  <div 
                    key={event.id}
                    className={`text-xs p-1 rounded truncate cursor-pointer ${getEventColor(event.color)}`}
                    onClick={() => setSelectedEvent(event)}
                  >
                    {event.title}
                  </div>
                ))}
                {dayTasks.slice(0, 3).map(task => (
                  <div 
                    key={task.id}
                    className={`text-xs p-1 rounded truncate cursor-pointer ${task.completed ? 'line-through bg-gray-200' : 'bg-yellow-100'}`}
                    onClick={() => toggleTaskCompletion(task.id)}
                  >
                    {task.title}
                  </div>
                ))}
                {(dayEvents.length > 3 || dayTasks.length > 3) && (
                  <div className="text-xs text-gray-500">+{dayEvents.length + dayTasks.length - 3} more</div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const renderWeekView = () => {
    const weekStart = startOfWeek(currentDate);
    const weekEnd = endOfWeek(currentDate);
    const weekDays = eachDayOfInterval({ start: weekStart, end: weekEnd });

    return (
      <div className="grid grid-cols-7 gap-1">
        {weekDays.map(day => {
          const dayEvents = events.filter(event => 
            isSameDay(parseISO(event.date), day)
          );
          const dayTasks = tasks.filter(task => 
            isSameDay(parseISO(task.date), day)
          );
          
          return (
            <div 
              key={day.toString()}
              className={`min-h-32 p-1 border ${isSameDay(day, new Date()) ? 'bg-blue-50' : ''}`}
            >
              <div className="text-right mb-1">
                <div>
                  {format(day, 'EEE')}
                </div>
                <div className={`text-lg ${isSameDay(day, new Date()) ? 'font-bold text-blue-600' : ''}`}>
                  {format(day, 'd')}
                </div>
              </div>
              <div className="space-y-1">
                {[...dayEvents, ...dayTasks].map(item => {
                  if ('startTime' in item) {
                    return (
                      <div 
                        key={item.id}
                        className={`text-xs p-1 rounded truncate cursor-pointer ${getEventColor(item.color)}`}
                        onClick={() => setSelectedEvent(item)}
                      >
                        <div className="flex items-center">
                          <Clock className="h-3 w-3 mr-1" />
                          {item.startTime}-{item.endTime}
                        </div>
                        {item.title}
                      </div>
                    );
                  } else {
                    return (
                      <div 
                        key={item.id}
                        className={`text-xs p-1 rounded truncate cursor-pointer ${item.completed ? 'line-through bg-gray-200' : 'bg-yellow-100'}`}
                        onClick={() => toggleTaskCompletion(item.id)}
                      >
                        {item.title}
                      </div>
                    );
                  }
                })}
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const renderDayView = () => {
    const dayEvents = events.filter(event => 
      isSameDay(parseISO(event.date), currentDate)
    ).sort((a, b) => a.startTime.localeCompare(b.startTime));
    
    const dayTasks = tasks.filter(task => 
      isSameDay(parseISO(task.date), currentDate)
    );

    return (
      <div>
        <div className="text-xl font-bold mb-4">
          {format(currentDate, 'EEEE, MMMM d, yyyy')}
        </div>
        <div className="space-y-2">
          {dayEvents.length === 0 && dayTasks.length === 0 && (
            <div className="text-center text-gray-500 py-8">
              No events or tasks scheduled for today
            </div>
          )}
          {dayEvents.map(event => (
            <Card key={event.id} className="cursor-pointer" onClick={() => setSelectedEvent(event)}>
              <CardHeader className="p-3">
                <div className="flex justify-between items-center">
                  <CardTitle className="text-lg">{event.title}</CardTitle>
                  <div className={`h-3 w-3 rounded-full ${getEventColor(event.color)}`}></div>
                </div>
              </CardHeader>
              <CardContent className="p-3 pt-0">
                <div className="flex items-center text-sm text-gray-600">
                  <Clock className="h-4 w-4 mr-1" />
                  {event.startTime} - {event.endTime}
                </div>
                {event.description && (
                  <p className="text-sm mt-2">{event.description}</p>
                )}
              </CardContent>
            </Card>
          ))}
          {dayTasks.map(task => (
            <Card key={task.id} className="cursor-pointer" onClick={() => toggleTaskCompletion(task.id)}>
              <CardHeader className="p-3">
                <div className="flex justify-between items-center">
                  <CardTitle className={`text-lg ${task.completed ? 'line-through' : ''}`}>{task.title}</CardTitle>
                  <div className={`text-xs px-2 py-1 rounded-full ${
                    task.priority === 'high' ? 'bg-red-100 text-red-800' :
                    task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {task.priority}
                  </div>
                </div>
              </CardHeader>
            </Card>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
        <div>
          <h1 className="text-2xl font-bold">Calendar App</h1>
          <div className="text-lg text-gray-600">
            {view === 'month' && format(currentDate, 'MMMM yyyy')}
            {view === 'week' && `${format(startOfWeek(currentDate), 'MMM d')} - ${format(endOfWeek(currentDate), 'MMM d, yyyy')}`}
            {view === 'day' && format(currentDate, 'MMMM d, yyyy')}
          </div>
        </div>
        
        <div className="flex flex-wrap gap-2">
          <Button variant={view === 'month' ? 'default' : 'outline'} onClick={() => setView('month')}>
            Month
          </Button>
          <Button variant={view === 'week' ? 'default' : 'outline'} onClick={() => setView('week')}>
            Week
          </Button>
          <Button variant={view === 'day' ? 'default' : 'outline'} onClick={() => setView('day')}>
            Day
          </Button>
          <Button variant="outline" onClick={goToToday}>
            Today
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" size="icon" onClick={prevPeriod}>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </Button>
            <Button variant="outline" size="icon" onClick={nextPeriod}>
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </Button>
          </div>
        </div>
      </div>

      <div className="flex gap-2 mb-4">
        <Button onClick={() => { setShowEventForm(true); setSelectedEvent(null); }}>
          <Plus className="h-4 w-4 mr-2" /> Add Event
        </Button>
        <Button variant="outline" onClick={() => { setShowTaskForm(true); }}>
          <Plus className="h-4 w-4 mr-2" /> Add Task
        </Button>
      </div>

      <div className="border rounded-lg p-4 bg-white">
        {view === 'month' && renderMonthView()}
        {view === 'week' && renderWeekView()}
        {view === 'day' && renderDayView()}
      </div>

      {showEventForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>{selectedEvent ? 'Edit Event' : 'Create New Event'}</CardTitle>
            </CardHeader>
            <form onSubmit={handleEventSubmit}>
              <CardContent className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Title</label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded"
                    value={eventForm.title}
                    onChange={(e) => setEventForm({...eventForm, title: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Date</label>
                  <input
                    type="date"
                    className="w-full p-2 border rounded"
                    value={eventForm.date}
                    onChange={(e) => setEventForm({...eventForm, date: e.target.value})}
                    required
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Start Time</label>
                    <input
                      type="time"
                      className="w-full p-2 border rounded"
                      value={eventForm.startTime}
                      onChange={(e) => setEventForm({...eventForm, startTime: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">End Time</label>
                    <input
                      type="time"
                      className="w-full p-2 border rounded"
                      value={eventForm.endTime}
                      onChange={(e) => setEventForm({...eventForm, endTime: e.target.value})}
                      required
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Color</label>
                  <select
                    className="w-full p-2 border rounded"
                    value={eventForm.color}
                    onChange={(e) => setEventForm({...eventForm, color: e.target.value})}
                  >
                    <option value="blue">Blue</option>
                    <option value="red">Red</option>
                    <option value="green">Green</option>
                    <option value="purple">Purple</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Description</label>
                  <textarea
                    className="w-full p-2 border rounded"
                    rows={3}
                    value={eventForm.description}
                    onChange={(e) => setEventForm({...eventForm, description: e.target.value})}
                  />
                </div>
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" type="button" onClick={() => setShowEventForm(false)}>
                  Cancel
                </Button>
                <Button type="submit">
                  {selectedEvent ? 'Update' : 'Create'} Event
                </Button>
              </CardFooter>
            </form>
          </Card>
        </div>
      )}

      {showTaskForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle>Create New Task</CardTitle>
            </CardHeader>
            <form onSubmit={handleTaskSubmit}>
              <CardContent className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Title</label>
                  <input
                    type="text"
                    className="w-full p-2 border rounded"
                    value={taskForm.title}
                    onChange={(e) => setTaskForm({...taskForm, title: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Date</label>
                  <input
                    type="date"
                    className="w-full p-2 border rounded"
                    value={taskForm.date}
                    onChange={(e) => setTaskForm({...taskForm, date: e.target.value})}
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">Priority</label>
                  <select
                    className="w-full p-2 border rounded"
                    value={taskForm.priority}
                    onChange={(e) => setTaskForm({...taskForm, priority: e.target.value as 'low' | 'medium' | 'high'})}
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                </div>
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Button variant="outline" type="button" onClick={() => setShowTaskForm(false)}>
                  Cancel
                </Button>
                <Button type="submit">
                  Create Task
                </Button>
              </CardFooter>
            </form>
          </Card>
        </div>
      )}

      {selectedEvent && !showEventForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>{selectedEvent.title}</CardTitle>
                <div className={`h-4 w-4 rounded-full ${getEventColor(selectedEvent.color)}`}></div>
              </div>
              <div className="flex items-center text-sm text-gray-600">
                <Calendar className="h-4 w-4 mr-1" />
                {format(parseISO(selectedEvent.date), 'MMMM d, yyyy')}
              </div>
              <div className="flex items-center text-sm text-gray-600">
                <Clock className="h-4 w-4 mr-1" />
                {selectedEvent.startTime} - {selectedEvent.endTime}
              </div>
            </CardHeader>
            <CardContent>
              {selectedEvent.description && (
                <div className="mb-4">
                  <h3 className="font-medium mb-1">Description</h3>
                  <p className="text-gray-700">{selectedEvent.description}</p>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => {
                setEventForm({
                  title: selectedEvent.title,
                  date: selectedEvent.date,
                  startTime: selectedEvent.startTime,
                  endTime: selectedEvent.endTime,
                  color: selectedEvent.color,
                  description: selectedEvent.description || ''
                });
                setShowEventForm(true);
              }}>
                Edit
              </Button>
              <Button variant="destructive" onClick={() => deleteEvent(selectedEvent.id)}>
                Delete
              </Button>
              <Button variant="outline" onClick={() => setSelectedEvent(null)}>
                Close
              </Button>
            </CardFooter>
          </Card>
        </div>
      )}
    </div>
  );
}
